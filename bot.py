# -*- coding: utf8 -*- 

import telebot
from telebot import types
import time
import logging
import dbworker
import config

bot = telebot.TeleBot(token = config.BOT_TOKEN)
msg_id = config.VERIFICATION_USER
text_example = '\n–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:\n\n#–ø—Ä–æ–¥–∞–º #–Ω–æ–≤—ã–π #dimensions\n\n–ü—Ä–æ–¥–∞–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä Dimensions ‚Äú–ù–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –∫–æ—Ç—è—Ç–∞¬ª. –í—Å–∫—Ä—ã–≤–∞–ª—Å—è –∏–∑ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞, –≤—Å–µ –Ω–∞ –º–µ—Å—Ç–µ.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 2000 —Ä—É–±–ª–µ–π\n–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞\n\n–ñ–∞–∫–æ–≤–∞ –¢–∞—Ç—å–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\n89527847337'
text_example_simple = '#–ø—Ä–æ–¥–∞–º #–Ω–æ–≤—ã–π #dimensions\n\n–ü—Ä–æ–¥–∞–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä Dimensions ‚Äú–ù–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –∫–æ—Ç—è—Ç–∞¬ª. –í—Å–∫—Ä—ã–≤–∞–ª—Å—è –∏–∑ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞, –≤—Å–µ –Ω–∞ –º–µ—Å—Ç–µ.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 2000 —Ä—É–±–ª–µ–π\n–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞\n\n–ñ–∞–∫–æ–≤–∞ –¢–∞—Ç—å–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\n89527847337'
text_task = '–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞\n2Ô∏è‚É£ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –ª–æ—Ç–∞ (–Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä, –≤—Å–∫—Ä—ã—Ç, –æ—Å—Ç–∞—Ç–∫–∏ –∏ —Å—Ö–µ–º–∞, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —Ç–¥)\n3Ô∏è‚É£ –¶–µ–Ω–∞ –Ω–∞–±–æ—Ä–∞\n4Ô∏è‚É£ –í–∞—à–∏ –§–ò–û\n5Ô∏è‚É£ –û—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∞\n6Ô∏è‚É£ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ (–ª—É—á—à–µ –≤—Å–µ–≥–æ - —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã)\n7Ô∏è‚É£ –ü—Ä–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏ –∫ –≤–∞—à–µ–º—É –ª–æ—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä #–ø—Ä–æ–¥–∞–º #–Ω–æ–≤—ã–π #–æ—Å—Ç–∞—Ç–∫–∏ #—Ä–∏–æ–ª–∏—Å #dimensions –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≤–∞—à–µ–≥–æ –Ω–∞–±–æ—Ä–∞\n8Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –ª–æ—Ç—É'

# –í–∫–ª—é—á–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
					level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard1 = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard=True)
keyboard1.row('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', '–ü–æ–º–æ—â—å')

keyboard2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard=True)
keyboard2.row('–û—Ç–º–µ–Ω–∞', '–ü–æ–º–æ—â—å')
keyboard2.add('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä')

keyboard3 = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard=True)
keyboard3.row('–ü–æ–º–æ—â—å')

keyboard4 = telebot.types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard=True)
keyboard4.row('–û—Ç–º–µ–Ω–∞', '–ü–æ–º–æ—â—å')
keyboard4.add('–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä')

# –ö–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
button1 = types.InlineKeyboardMarkup()
callback_button = types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞", callback_data="example_text")
button1.add(callback_button)

button2 = types.InlineKeyboardMarkup()
callback_button1 = types.InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="push")
callback_button2 = types.InlineKeyboardButton(text="–ó–∞–±—Ä–∞–∫–æ–≤–∞—Ç—å", callback_data="delete")
callback_button3 = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="edit")
button2.add(callback_button1)
button2.add(callback_button2)
button2.add(callback_button3)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# –•–µ—Ä–Ω—è —Å–¥–µ–ª–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å—Ç—Ä–æ—á–∫–∞ –∫–∞–∑–∞–ª–∞—Å—å –º–µ–Ω—å—à–µ
def send_message(message, text, type):
	if type == 1:
		bot.send_message(message.chat.id, text, reply_markup = keyboard1)
	else:
		bot.send_message(message.chat.id, text, reply_markup = keyboard2)
	return

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_message(message):
	state = dbworker.get_current_state(message.chat.id)
	if state == config.States.S_START.value:
		bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –Ω–∞ –Ø—Ä–º–∞—Ä–∫–µ ¬´–ú–∏—Ä –í—ã—à–∏–≤–∫–∏¬ª! üöÄ –ù–∞—á–Ω–µ–º —Ä–∞—Å—Ö–æ–º—è—á–∫—É?) \n\n–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–π –Ω–∞–±–æ—Ä (–ª–æ—Ç) –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup = keyboard1)
	elif state == config.States.S_SEND.value:
		bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è, –í—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –ª–æ—Ç, –Ω–æ —è –Ω–µ –ø–æ–ª—É—á–∏–ª, –ø–æ—ç—Ç–æ–º—É —è –¥–æ —Å–∏—Ö –ø–æ—Ä –∂–¥—É', reply_markup = keyboard2)
	else:  # –ü–æ–¥ "–æ—Å—Ç–∞–ª—å–Ω—ã–º" –ø–æ–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "0" - –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
		bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –ª–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª @yarmarka_mirkrestikom', reply_markup = keyboard1)
		dbworker.set_state(message.chat.id, config.States.S_START.value)

@bot.message_handler(commands=['publish'])
def publish_message(message):
	bot.send_message(message.chat.id, text_task, reply_markup = keyboard2)
	bot.send_message(message.chat.id, '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup = button1)
	dbworker.set_state(message.chat.id, config.States.S_SEND.value)

@bot.message_handler(commands=['example'])
def example_message(message):
	bot.send_photo(chat_id = message.chat.id, photo = 'https://www.itvoru.ru/upload/iblock/b93/b93dbc7f97f20da61d30021b1e7446ec.jpg', caption = text_example_simple)

@bot.message_handler(commands=['help'])
def help_message(message):
	if message.from_user.username == config.USERNAME_ADMIN:
		bot.send_message(message.chat.id, '–£ –≤–∞—Å –ø—Ä–∞–≤–∞–≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –±—Ä–∞–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã. –ë–æ—Ç —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –ª–æ—Ç\n\n –ö–æ–º–∞–Ω–¥–∞:\n/auto - –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è', reply_markup = keyboard3)
	else:
		bot.send_message(message.chat.id, '–Ø –ø–æ–º–æ–≥–∞—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à–∏ –ª–æ—Ç—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ @yarmarka_mirkrestikom\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\nüö© /help - –ø–æ–º–æ—â—å\nüö© /start - –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞\nüö© /publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç\nüö© /example - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä\nüö© /cancel - –æ—Ç–º–µ–Ω–∞\n\nüö© #bug <—Å–æ–æ–±—â–µ–Ω–∏–µ> - —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ\nüö© #propos <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\nüö© #info <—Å–æ–æ–±—â–µ–Ω–∏–µ> - —Ö–æ—Ç–∏—Ç–µ –Ω–∞–º —á—Ç–æ-—Ç–æ —Å–æ–æ–±—â–∏—Ç—å? –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ–º!\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @tanyakurganova', reply_markup = keyboard1)
	dbworker.set_state(message.chat.id, config.States.S_START.value)

@bot.message_handler(commands=['cancel'])
def cancel_message(message):
	bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è, —è –º–æ–≥—É –ø–æ–º–æ—â—å –µ—â–µ —Å —á–µ–º-–Ω–∏–±—É–¥—å?', reply_markup = keyboard1)
	dbworker.set_state(message.chat.id, config.States.S_START.value)

@bot.message_handler(commands=['auto'])
def auto_message(message):
	if message.from_user.username == config.USERNAME_ADMIN:
		state = dbworker.get_current_state(0)
		print("state " + state)
		text = '123'
		if state == "0":
			text = '–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è ON'
			state = "1"
		else:
			text = '–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è OFF'
			state = "0"
		if dbworker.set_state(0, state):
			bot.send_message(message.chat.id, text, reply_markup = keyboard1)
		else: 
			bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. ', reply_markup = keyboard1)
		dbworker.set_state(message.chat.id, config.States.S_START.value)
	else:
		send_text(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def send_text(message):
	msg_text = message.text.lower()
	state = dbworker.get_current_state(message.chat.id)
	# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
	if message.from_user.username == config.USERNAME_ADMIN:
		if state == config.States.S_REWRITE.value:
			global msg_id
			send_message(message, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 1)
			bot.send_message(int(msg_id), '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n' + str(message.text))
			msg_id = config.VERIFICATION_USER
			dbworker.set_state(message.chat.id, config.States.S_START.value)
		else:
			if msg_text == '–ø–æ–º–æ—â—å':
				help_message(message)
			elif msg_text == '–∞–≤—Ç–æ':
				auto_message(message)
			else:
				help_message(message)
	# –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	else:
		if message.text.find('#bug',0,len(message.text)) >= 0 or message.text.find('#info',0,len(message.text)) >= 0 or message.text.find('#propos',0,len(message.text)) >= 0:
			name = (str(message.from_user.first_name) + " " + str(message.from_user.last_name), "@" + str(message.from_user.username))[message.from_user.username != None]
			bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', reply_markup = keyboard1)
			bot.send_message(chat_id = config.VERIFICATION_USER, text =  'from:\n' + name + '\n\ntext:\n' + str(message.text))
			dbworker.set_state(message.chat.id, config.States.S_START.value)
		else:
			if state == config.States.S_START.value:
				if msg_text == '–ø—Ä–∏–≤–µ—Ç':
					send_message(message, '–ü—Ä–∏–≤–µ—Ç, –æ–ø—É–±–ª–∏–∫—É–µ–º –ª–æ—Ç?', 1)
				elif msg_text == '–ø–æ–º–æ—â—å':
					help_message(message)
				elif msg_text == '–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä':
					example_message(message)
				elif msg_text == '–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' or msg_text == '–¥–∞' or msg_text ==  '–¥–∞–≤–∞–π':
					publish_message(message)
				else:
					help_message(message)
			else:
				if msg_text == '–æ—Ç–º–µ–Ω–∞':
					cancel_message(message)
				elif msg_text == '–ø–æ–º–æ—â—å':
					help_message(message)
				elif msg_text == '–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä':
					example_message(message)
				else:
					if dbworker.get_current_state(message.chat.id) == config.States.S_HALF_PHOTO.value:
						name = (str(message.from_user.first_name) + " " + str(message.from_user.last_name), "@" + str(message.from_user.username))[message.from_user.username != None]
						text = name + "\n" + str(message.text)
						photo = dbworker.get_half_state(message.chat.id)
						send_post(message, photo, text)
						dbworker.set_half_state(message.chat.id, None)
						dbworker.set_state(message.chat.id, config.States.S_START.value)
					elif dbworker.get_current_state(message.chat.id) == config.States.S_HALF_TEXT.value:
						bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞, –æ—Å—Ç–∞–ª—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞', reply_to_message_id = message.message_id, reply_markup = keyboard2)
						dbworker.set_half_state(message.chat.id, message.text)
					else:
						bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç –µ—Å—Ç—å, –æ—Å—Ç–∞–ª–∞—Å—å –∫–∞—Ä—Ç–∏–Ω–∫–∞', reply_to_message_id = message.message_id, reply_markup = keyboard2)
						dbworker.set_half_state(message.chat.id, message.text)
						# send_message(message, '–ù–∞–ø–æ–º–∏–Ω–∞—é. ' + text_task, 2)
						dbworker.set_state(message.chat.id, config.States.S_HALF_TEXT.value)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
@bot.message_handler(content_types=['photo'],
					 func=lambda message: dbworker.get_current_state(message.chat.id) == config.States.S_SEND.value or  dbworker.get_current_state(message.chat.id) == config.States.S_HALF_TEXT.value or dbworker.get_current_state(message.chat.id) == config.States.S_HALF_PHOTO.value)
def send_new_posts_photo(message):
	if message.caption == None and dbworker.get_current_state(message.chat.id) == config.States.S_SEND.value:
		bot.send_message(message.chat.id, '–ö–∞—Ä—Ç–∏–Ω–∫–∞ –µ—Å—Ç—å, –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç', reply_to_message_id = message.message_id, reply_markup = keyboard2)
		# send_message(message, '–ù–∞–ø–æ–º–∏–Ω–∞—é. ' + text_task, 2)
		dbworker.set_half_state(message.chat.id, message.photo[0].file_id)
		dbworker.set_state(message.chat.id, config.States.S_HALF_PHOTO.value)
	elif message.caption == None and dbworker.get_current_state(message.chat.id) == config.States.S_HALF_PHOTO.value:
		bot.send_message(message.chat.id, '–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞, –æ—Å—Ç–∞–ª—Å—è —Ç–µ–∫—Å—Ç', reply_to_message_id = message.message_id, reply_markup = keyboard2)
		# send_message(message, '–ù–∞–ø–æ–º–∏–Ω–∞—é. ' + text_task, 2)
		dbworker.set_half_state(message.chat.id, message.photo[0].file_id)
		dbworker.set_state(message.chat.id, config.States.S_HALF_PHOTO.value)
	else:
		try:
			name = (str(message.from_user.first_name) + " " + str(message.from_user.last_name), "@" + str(message.from_user.username))[message.from_user.username != None]
			if message.caption == None:
				message.caption = dbworker.get_half_state(message.chat.id)
			text = name + "\n" + str(message.caption)
			send_post(message, message.photo[0].file_id, text)
			dbworker.set_half_state(message.chat.id, None)
			dbworker.set_state(message.chat.id, config.States.S_START.value)
		except Exception as e:
			print(e)
			send_message(message, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', 2)
	return
	
@bot.message_handler(content_types=['photo'],
					 func=lambda message: dbworker.get_current_state(message.chat.id) != config.States.S_SEND.value)
def send_photo(message):
	send_message(message, '–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç? \n–ù–∞–ø–∏—à–∏—Ç–µ \'–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish', 1)
	return


def send_post(message, _photo, _text):
	if dbworker.get_current_state(0) == "1":
		bot.send_photo(chat_id = config.CHANNEL_NAME, photo = _photo, caption = _text)
		time.sleep(1)	
		bot.send_message(message.chat.id, '–í–∞—à –ª–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ üòéüëåüèº', reply_to_message_id = message.message_id, reply_markup = keyboard1)
	else:
		bot.send_photo(chat_id = config.VERIFICATION_USER, photo = _photo, caption = str(message.chat.id) + "\n" + _text, reply_markup = button2)
		time.sleep(1)
		bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', reply_to_message_id = message.message_id, reply_markup = keyboard1)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
# –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ —Ä–∞–∑–±–∏—Ç—å —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
	# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
	if call.message:
		if call.data == "example_text":
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text_example)
		elif call.data == "push":
			try:
				msg = call.message.caption.split(maxsplit=1) # [0] - chat_id [1] - text 
				bot.send_photo(chat_id = config.CHANNEL_NAME,  photo = call.message.photo[0].file_id, caption = msg[1])
				time.sleep(1)
				bot.send_message(call.message.chat.id, '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', reply_to_message_id = call.message.message_id, reply_markup = keyboard1)
				bot.send_message(int(msg[0]), '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', reply_markup = keyboard1)
			except:
				send_message(call.message, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', 1)
			return
		elif call.data == "delete":
			msg = call.message.caption.split(maxsplit=1) # [0] - chat_id [1] - text 
			bot.send_message(int(msg[0]), '–ó–∞–±—Ä–∞–∫–æ–≤–∞–Ω–æ', reply_markup = keyboard1)
		elif call.data == "edit":
			global msg_id
			msg = call.message.caption.split(maxsplit=1) # [0] - chat_id [1] - text 
			msg_id = msg[0]
			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π', reply_markup = keyboard1)
			dbworker.set_state(call.message.chat.id, config.States.S_REWRITE.value)
	# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
	# –ù–û! –≠—Ç–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ -> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
	elif call.inline_message_id:
		if call.data == "test":
			bot.edit_message_text(inline_message_id=call.inline_message_id, text="–ë–¥—ã—â—å")

@bot.message_handler(content_types=['sticker', 'audio', 'document', 'video', 'video_note', 'voice', 'location', 'contact', 'new_chat_members', 'left_chat_member', 'new_chat_title', 'new_chat_photo', 'delete_chat_photo', 'group_chat_created', 'supergroup_chat_created', 'channel_chat_created', 'migrate_to_chat_id', 'migrate_from_chat_id', 'pinned_message'])
def sticker_id(message):
    help_message(message)

if __name__ == "__main__":
	bot.infinity_polling()